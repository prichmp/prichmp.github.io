/**
 * Row system in flex-boxes
 * ===========================================================================
 *
 * Rows largely come from Milligram (https://github.com/milligram/milligram/blob/master/src/_Grid.sass)
 * Which was largely inspired by  by Philip Walton: http://philipwalton.github.io/solved-by-flexbox/demos/grids/
 * Modified with by Matthew Prichard
 */

//Define this is rem or percent. (or some other unit that can be subtrated from a percent)
//This way we take advantage of LESS' math features.
@col-gutter-width: 0.25rem;
@col-gutter-height: 0.5rem;

//Sets paddings on row wrappers. Use whatever unit you want.
@row-wrapper-padding-width: 2em;
@row-wrapper-padding-height: 0;
@row-wrapper-min-height: 5vh;


// Wraps the row and gives the whitespace gutters around the row
.row-wrapper
{
  box-sizing: border-box;
	margin: 0 auto;
	max-width: 100rem;
  min-height: @row-wrapper-min-height;
  width: 100%;
	padding: @row-wrapper-padding-height @row-wrapper-padding-width;
	position: relative;
}

//Defines a row.
.row
{
    box-sizing: border-box;
    display: flex;
    flex-direction: row;
    padding: 0;
    height: 100%;

    &.row-wrap
    {
      flex-wrap: wrap;
    }

	// Vertically Align Columns
	// .row-* vertically aligns every .col in the .row
	&.row-top
    {
        align-items: flex-start;
    }

	&.row-bottom
    {
        align-items: flex-end;
    }

	&.row-center
    {
        align-items: center;
    }

	&.row-stretch
	{
        align-items: stretch;
    }

	&.row-baseline
	{
        align-items: baseline;
    }


    @media screen and (max-width: 60.0rem)
    {
        flex-direction: column;
        width: 100%;
        margin-left:auto;
    }

}


//Set the width of the column
//@width should be a percentage width.
//Example: .col-width(90%);
.col-width(@width)
{
    flex: 1 1 @width;
    max-width: @width;

    @media screen and (max-width: 60rem)
    {
        max-width: none;
    }
}

//Defines a box inside a row
.column
{
    box-sizing: border-box;
    display: block;
    flex: 1;
    margin: @col-gutter-height @col-gutter-width;
    padding: 0.5rem 1rem; //0.5rem
    min-height: 2em; //IE11 workaround.
    max-width: 100%;
    width: 100%;
    overflow-x:auto;

    > *
    {
        max-width: 100%;
    }

    //vertically aligns an individual .column
    &.col-top
    {
        align-self: flex-start;
    }
    &.col-bottom
    {
        align-self: flex-end;
    }

    &.col-center
    {
        align-self: center;
    }

    &.col-stretch
    {
        align-self: stretch;
    }

    // Explicit Column Percent Sizes
    // By default each grid column will evenly distribute
    // across the grid. However, you can specify individual
    // columns to take up a certain size of the available area
    &.column-10
    {
        .col-width(10%-(2.75*@col-gutter-width));
    }

    &.column-20
    {
        .col-width(20%-(2.75*@col-gutter-width));
    }

    &.column-25
    {
        .col-width(25%-(2.75*@col-gutter-width));
    }

    &.column-33,
    &.column-34
    {
        .col-width(33.3333333%-(2.75*@col-gutter-width));
    }

    &.column-38
    {
        .col-width(38.2%-(2.75*@col-gutter-width));
    }

    &.column-40
    {
        .col-width(40%-(2.75*@col-gutter-width));
    }

    &.column-50
    {
        .col-width(50%-(2.75*@col-gutter-width));
    }

    &.column-60
    {
        .col-width(60%-(2.75*@col-gutter-width));
    }

    &.column-61
    {
        .col-width(61.8%-(2.75*@col-gutter-width));
    }

    &.column-66, &.column-67
    {
        .col-width(66.6666%-(2.75*@col-gutter-width));
    }

    &.column-75
    {
        .col-width(75%-(2.75*@col-gutter-width));
    }

    &.column-80
    {
        .col-width(80%-(2.75*@col-gutter-width));
    }

    &.column-90
    {
        .col-width(90%-(2.75*@col-gutter-width));
    }


    //@media screen and (max-width: 60rem)
    //{

    //}

}
