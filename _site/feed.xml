<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Write Forward</title>
    <description>The Write Forward Logging Framework for Java simplifies logging for Java. Write easy-to-use, portable, and future-proof logging code. Works with SLF4J, Log4J, Logback, and java.util.logging.
</description>
    <link>http://prichmp.github.io/Write-Forward/</link>
    <atom:link href="http://prichmp.github.io/Write-Forward/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 03 May 2016 22:15:58 -0600</pubDate>
    <lastBuildDate>Tue, 03 May 2016 22:15:58 -0600</lastBuildDate>
    <generator>Jekyll v3.1.3</generator>
    
      <item>
        <title>Configuring Write Forward</title>
        <description>&lt;h1 id=&quot;configuring-write-forward&quot;&gt;Configuring Write Forward&lt;/h1&gt;

&lt;p&gt;There are three methods that apply configuration to Write Forward:
 - A YAML file
 - System Properties
 - Programmatic configuration&lt;/p&gt;

&lt;h2 id=&quot;system-properties&quot;&gt;System Properties&lt;/h2&gt;

&lt;p&gt;Currently Write Forward honors two system properties:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;writeforward.configuration&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Sets the location of the configuration file. Write Forward will first attempt to load the file on the classpath using &lt;code class=&quot;highlighter-rouge&quot;&gt;.getResourceAsStream(configLocation)&lt;/code&gt;, and if that fails Write Forward will load it as a file using &lt;code class=&quot;highlighter-rouge&quot;&gt;new File(configLocation)&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Type: String/Filepath&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;writeforward.configuration.isslow&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Sets if Write Forward should perform the slow reflection operations: get stacktrace, find file/class/method/line the log was call from.&lt;/li&gt;
  &lt;li&gt;Type: boolean (true/false)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can run your project with command line arguments. For example: &lt;code class=&quot;highlighter-rouge&quot;&gt;java -Dwriteforward.configuration=&quot;C:\Users\Me\MyProject\loggerconfig.yaml&quot; -Dwriteforward.configuration.isslow=&quot;true&quot; -jar myApplication.jar&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;yaml-config-file&quot;&gt;YAML Config File&lt;/h2&gt;

&lt;p&gt;Write Forward Configuration Files are written in YAML.
&lt;strong&gt;Do not put tabs in YAML files!&lt;/strong&gt; YAML does not like tabs in YAML files. Use spaces to indent your YAML files instead.&lt;/p&gt;

&lt;p&gt;Write Forward checks the &lt;code class=&quot;highlighter-rouge&quot;&gt;writeforward.configuration&lt;/code&gt; system property first for the location of the configuration file. If &lt;code class=&quot;highlighter-rouge&quot;&gt;writeforward.configuration&lt;/code&gt; is not set or the configuration file is not where it is supposed to be, the Write Forward loads &lt;code class=&quot;highlighter-rouge&quot;&gt;write-forward-config.yaml&lt;/code&gt; by using the class loader. It is recommended to put this configuration file in &lt;code class=&quot;highlighter-rouge&quot;&gt;/src/main/resources&lt;/code&gt; in your project.&lt;/p&gt;

&lt;p&gt;The structure of a configuration file is as follows, noting what is requires and what is optional:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;writeforward: #REQUIRED: Root of the configuration. In theory other yaml content could be in here as well.
         isslow: true #OPTIONAL: If true performs slow reflection operations
         numberofstackframes: 5 #OPTIONAL: The number of stack frames to add to the message. Default 50..
         outputs: #REQUIRED sets what logging framework to log to.
              - name: slf4j #REQUIRED: Logging framework to use.
                format: |+ #REQUIRED: Formats the message using Pebble
                    ===================================================================================================================
                    [{{ level }}] {{ marker }} {{ timestamp }} {{ thread }} {% if class is not empty %}{{ class }}:{{ line }}{% endif %}

                    {{ message }}

                    {% if values is not empty %}
                    {% for value in values %}
                    {{ value.key }} = {{ value.value }}

                    {% endfor %}
                    {% endif %}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Outputs in the configuration file are a list. Each list entry outputs each log message to its own underlying frameworks.&lt;/p&gt;

&lt;p&gt;Valid &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt; for each &lt;code class=&quot;highlighter-rouge&quot;&gt;output&lt;/code&gt; includes:
 - &lt;code class=&quot;highlighter-rouge&quot;&gt;slf4j&lt;/code&gt; : Which writes out to slf4j
 - &lt;code class=&quot;highlighter-rouge&quot;&gt;javalogging&lt;/code&gt;: Which writes out to java.util.logging
 - &lt;code class=&quot;highlighter-rouge&quot;&gt;console&lt;/code&gt;: Which writes out to system.out&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;format&lt;/code&gt; in each output only controls what message string is put in to the message field of each logger. Write Forward will attempt to input exceptions and markers, into the underlying framework nativly. For example, Write Forward will call &lt;code class=&quot;highlighter-rouge&quot;&gt;logger.error(message.getMarker().toSlf4jMarker(), message.getMessage(), message.getException());&lt;/code&gt; in SLF4j.&lt;/p&gt;

&lt;h2 id=&quot;programmatic-configuration&quot;&gt;Programmatic configuration&lt;/h2&gt;

&lt;p&gt;Write Forward also has a programmatic API for setting the configuration.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import org.writeforward.logger.Configurator;

...

Configurator.build() //Starts a new programmatic configuration.
.withOutput(new StandardOutput(new DefaultMessageFormatter())) //Sets a Output to write to.
.commit(); // Commits the new configuration to be used.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;See the JavaDocs for &lt;code class=&quot;highlighter-rouge&quot;&gt;org.writeforward.logger.MessageBuilder&lt;/code&gt; for the full programatic API.&lt;/p&gt;

&lt;h2 id=&quot;what-if-a-configuration-is-not-found&quot;&gt;What if a configuration is not found?&lt;/h2&gt;

&lt;p&gt;In the event a configuration is not found by the first time the logger is called, Write Forward attempts to configure itself.&lt;/p&gt;

&lt;p&gt;If a configuration file is not found on the classpath, Write forward will check to see what logging frameworks are on the classpath, and load the default configuration for that framework is. It checks to see if Logback or Log4j is on the classpath, and if one is, it loads the default Logback or Log4j configuration file.&lt;/p&gt;

&lt;h3 id=&quot;default-log4j-configuration&quot;&gt;Default Log4j configuration:&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;writeforward:
         isslow: true
         numberofstackframes: 5
         outputs:
              - name: log4j
                format: |-
                    {{ timestamp }} [{{ thread }}] {{ level }}{% if marker is not empty %} {{ marker }}{% endif %}{% if class is not empty %} {{ class }}:{{ line }}{% endif %} - {{ message }}
                    {% if values is not empty %}

                    {% for value in values %}
                    {{ value.key }} = {{ value.value }}

                    {% endfor %}
                    {% endif %}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;default-logback-configuration&quot;&gt;Default Logback configuration&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;writeforward: #Root of the configuration
         isslow: true #If true performs slow reflection operations
         numberofstackframes: 5 #Determines the max number of stack frames put into the message&#39;s stack trace.
         outputs:
              - name: slf4j #Uses the default SLF4J outputter.
                format: |+ #Formats the message using Pebble
                    ===================================================================================================================
                    [{{ level }}] {{ marker }} {{ timestamp }} {{ thread }} {% if class is not empty %}{{ class }}:{{ line }}{% endif %}

                    {{ message }}

                    {% if values is not empty %}
                    {% for value in values %}
                    {{ value.key }} = {{ value.value }}

                    {% endfor %}
                    {% endif %}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Tue, 03 May 2016 00:00:00 -0600</pubDate>
        <link>http://prichmp.github.io/Write-Forward/documentation/2016/05/03/configuration.html</link>
        <guid isPermaLink="true">http://prichmp.github.io/Write-Forward/documentation/2016/05/03/configuration.html</guid>
        
        
        <category>documentation</category>
        
      </item>
    
      <item>
        <title>Using SLF4J</title>
        <description>&lt;h1 id=&quot;using-slf4j&quot;&gt;Using SLF4J&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;http://www.slf4j.org/&quot;&gt;SLF4J&lt;/a&gt; is an abstraction for other logging frameworks. All of the most popular logging frameworks support a SLF4J implementation. This makes SLF4J a nice target for Write Forward to output to.&lt;/p&gt;

&lt;p&gt;Output to SLF4J is done through the &lt;code class=&quot;highlighter-rouge&quot;&gt;org.writeforward.logger.writers.Slf4jOutput&lt;/code&gt; class. The SLF4J logger that Write Forward outputs to is managed by this class. The logger that Write Forward uses has the name of this class. (i.e. &lt;code class=&quot;highlighter-rouge&quot;&gt;LoggerFactory.getLogger(Slf4jOutput.class);&lt;/code&gt;)&lt;/p&gt;

&lt;h2 id=&quot;configuring-write-forward&quot;&gt;Configuring Write Forward&lt;/h2&gt;
&lt;p&gt;To configure Write Forward the recommended way is to put a configuration file in the  &lt;code class=&quot;highlighter-rouge&quot;&gt;/src/main/resources/&lt;/code&gt; folder in your Java, Scala or Kotlin project.&lt;/p&gt;

&lt;p&gt;Here is an example &lt;code class=&quot;highlighter-rouge&quot;&gt;/src/main/resources/write-forward-config.yaml&lt;/code&gt; file.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;writeforward: #Root of the configuration
         isslow: true #If true performs slow reflection operations
         numberofstackframes: 5 #Determines the max number of stack frames put into the message&#39;s stack trace.
         outputs:
              - name: slf4j #Uses the default SLF4J outputter.
                format: |+ #Formats the message using Pebble
                    ===================================================================================================================
                    [{{ level }}] {{ marker }} {{ timestamp }} {{ thread }} {% if class is not empty %}{{ class }}:{{ line }}{% endif %}

                    {{ message }}

                    {% if values is not empty %}
                    {% for value in values %}
                    {{ value.key }} = {{ value.value }}

                    {% endfor %}
                    {% endif %}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;levels&quot;&gt;Levels&lt;/h2&gt;

&lt;p&gt;Write Forward uses the following levels:
 - TRACE
 - DEBUG
 - INFO
 - WARN
 - ERROR
 - FATAL&lt;/p&gt;

&lt;p&gt;SLF4J only recognizes the following levels:
 - TRACE
 - DEBUG
 - INFO
 - WARN
 - ERROR&lt;/p&gt;

&lt;p&gt;There is no FATAL level in SLF4J. When Write Forward uses SLF4J, it adds a “FATAL” marker to any FATAL-level events. SLF4J will convert the fatal marker back into the FATAL level if the underlying framework supports the FATAL logging level.&lt;/p&gt;
</description>
        <pubDate>Mon, 02 May 2016 00:00:00 -0600</pubDate>
        <link>http://prichmp.github.io/Write-Forward/documentation/2016/05/02/slf4j.html</link>
        <guid isPermaLink="true">http://prichmp.github.io/Write-Forward/documentation/2016/05/02/slf4j.html</guid>
        
        
        <category>documentation</category>
        
      </item>
    
      <item>
        <title>Pebble Formatter</title>
        <description>&lt;h1 id=&quot;the-pebble-formatter&quot;&gt;The Pebble Formatter&lt;/h1&gt;
&lt;p&gt;Write Forward uses &lt;a href=&quot;http://www.mitchellbosecke.com/pebble/home&quot;&gt;Pebble&lt;/a&gt; a lightweight, decently-fast template engine originally designed for webpages. Write Forward uses it to format output messages. One of the advantages of Pebble is that the message is compiled once and reused many times.&lt;/p&gt;

&lt;h2 id=&quot;configuration-file&quot;&gt;Configuration File&lt;/h2&gt;

&lt;p&gt;The following is a sample &lt;code class=&quot;highlighter-rouge&quot;&gt;/src/main/resources/write-forward-config.yaml&lt;/code&gt; configuration file.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;writeforward:
         isslow: true
         numberofstackframes: 2
         outputs:
              - name: console
                format: |+ # See http://stackoverflow.com/questions/3790454/in-yaml-how-do-i-break-a-string-over-multiple-lines for YAML multiline strings.

                    [{{ level }}] {{ marker }} {{ timestamp }} {% if class is not empty %}{{ class }}:{{ line }}{% endif %}

                    {{ message }}

                    {% if exception is not empty %}
                    {{ exception }}

                    {% endif %}
                    {% if values is not empty %}
                    {% for value in values %}
                    {{ value.key }} = {{ value.value }}

                    {% endfor %}
                    {% endif %}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The writeforward –&amp;gt; outputs –&amp;gt; format key in the YAML file holds the format string for Pebble. By editing this format the output to the underlying logging framework is changed.&lt;/p&gt;

&lt;h2 id=&quot;applied-to-the-format&quot;&gt;Applied to the Format&lt;/h2&gt;
&lt;p&gt;The following variables are applied to each format when a new message is being formatted using Pebble.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Key&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;exception&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;exception.toString()&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;exception.message&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;exception.getLocalizedMessage()&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;exception.cause&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;exception.getCause().toString()&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;exception.name&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;exception.getClass().getName()&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;timestamp&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;May 2, 2016 12:49:58 PM MDT&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;time&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;12:49:58 PM MDT&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;date&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;May 2, 2016&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;method&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;The method name that Write Forward was called from. (e.x. myMethod)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;level&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;One of the logging levels in all caps (e.x. DEBUG)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;line&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;The line number that Write Forward was called from. May be -1 if the Write Forward configuration isslow = true&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;values&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;A collection of map entries (i.e. values.entrySet()) representing any .withValue(String key, String value) entries.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;thread&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;The thread name that Write Forward was called from.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;message&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;The message as set with .message(String message)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;file&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;The filename of the file Write Forward was called from (e.x. MyClass.java)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;stacktrace&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;An array of &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/StackTraceElement.html&quot;&gt;StackTraceElement&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;marker&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;Each marker output with a space in-between (e.x. HTTPENGINE PLUGIN)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;class&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;The full class name of the location Write Forward was called from. (e.x. com.company.project.MyClass)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</description>
        <pubDate>Mon, 02 May 2016 00:00:00 -0600</pubDate>
        <link>http://prichmp.github.io/Write-Forward/documentation/2016/05/02/pebble.html</link>
        <guid isPermaLink="true">http://prichmp.github.io/Write-Forward/documentation/2016/05/02/pebble.html</guid>
        
        
        <category>documentation</category>
        
      </item>
    
      <item>
        <title>Using Logback</title>
        <description>&lt;h1 id=&quot;using-logback&quot;&gt;Using Logback&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;http://logback.qos.ch/&quot;&gt;Logback&lt;/a&gt; is a SLF4J-based logging framework.&lt;/p&gt;

&lt;h2 id=&quot;project-setup&quot;&gt;Project Setup&lt;/h2&gt;

&lt;p&gt;Add the following dependencies to your Maven POM. Check with The &lt;a href=&quot;http://search.maven.org/#search%7Cgav%7C1%7Cg%3A%22ch.qos.logback%22%20AND%20a%3A%22logback-classic%22&quot;&gt;Central Maven Repository&lt;/a&gt; to determine the current version for Logback. Check the [download page]{ /Write-Forward/download.html } for the current Write Forward version.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
  &amp;lt;groupId&amp;gt;ch.qos.logback&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;logback-classic&amp;lt;/artifactId&amp;gt;
  &amp;lt;version&amp;gt;${logback-version}&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;

&amp;lt;dependency&amp;gt;
  &amp;lt;groupId&amp;gt;org.writeforward&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;logger&amp;lt;/artifactId&amp;gt;
  &amp;lt;version&amp;gt;${write-forward-version}&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;configuring-write-forward&quot;&gt;Configuring Write Forward&lt;/h2&gt;
&lt;p&gt;Use SLF4J to output to Logback. To configure Write Forward the recommended way is to put a configuration file in the  &lt;code class=&quot;highlighter-rouge&quot;&gt;/src/main/resources/&lt;/code&gt; folder in your Java, Scala, or Kotlin project.&lt;/p&gt;

&lt;p&gt;Here is an example &lt;code class=&quot;highlighter-rouge&quot;&gt;/src/main/resources/write-forward-config.yaml&lt;/code&gt; file for Logback.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;writeforward:
         isslow: true
         numberofstackframes: 5
         outputs:
              - name: slf4j
                format: |+
                    ===================================================================================================================
                    [{{ level }}] {{ marker }} {{ timestamp }} {{ thread }} {% if class is not empty %}{{ class }}:{{ line }}{% endif %}

                    {{ message }}

                    {% if values is not empty %}
                    {% for value in values %}
                    {{ value.key }} = {{ value.value }}

                    {% endfor %}
                    {% endif %}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;configuring-logback&quot;&gt;Configuring Logback&lt;/h2&gt;
&lt;p&gt;To configure Logback, consult the &lt;a href=&quot;http://logback.qos.ch/manual/configuration.html&quot;&gt;Logback documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Logback, in similar style to Write Forward, also likes to have a configuration file live in the &lt;code class=&quot;highlighter-rouge&quot;&gt;/src/main/resources&lt;/code&gt; folder in your project.&lt;/p&gt;

&lt;p&gt;To use the following sample configuration create a new file with the name and location &lt;code class=&quot;highlighter-rouge&quot;&gt;/src/main/resources/logback.xml&lt;/code&gt; and copy the below XML content into it. Once the file is in place Logback should automatically locate it on the next run.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;

	&lt;span class=&quot;nt&quot;&gt;&amp;lt;appender&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;STDOUT&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ch.qos.logback.core.ConsoleAppender&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;encoder&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
		    &lt;span class=&quot;nt&quot;&gt;&amp;lt;pattern&amp;gt;&lt;/span&gt;%msg&lt;span class=&quot;nt&quot;&gt;&amp;lt;/pattern&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;/encoder&amp;gt;&lt;/span&gt;

	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/appender&amp;gt;&lt;/span&gt;

	&lt;span class=&quot;nt&quot;&gt;&amp;lt;logger&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.mkyong.web&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;level=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;debug&quot;&lt;/span&gt;
		&lt;span class=&quot;na&quot;&gt;additivity=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;false&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;appender-ref&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ref=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;STDOUT&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/logger&amp;gt;&lt;/span&gt;

	&lt;span class=&quot;nt&quot;&gt;&amp;lt;root&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;level=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;debug&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;appender-ref&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ref=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;STDOUT&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/root&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Mon, 02 May 2016 00:00:00 -0600</pubDate>
        <link>http://prichmp.github.io/Write-Forward/documentation/2016/05/02/logback.html</link>
        <guid isPermaLink="true">http://prichmp.github.io/Write-Forward/documentation/2016/05/02/logback.html</guid>
        
        
        <category>documentation</category>
        
      </item>
    
      <item>
        <title>Using Log4j</title>
        <description>&lt;h1 id=&quot;using-log4j&quot;&gt;Using Log4j&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;http://logging.apache.org/log4j/2.x/&quot;&gt;Log4j&lt;/a&gt; is a popular logging framework. Write Forward only supports Log4j 2.x, not the legacy Log4j 1.x.&lt;/p&gt;

&lt;h2 id=&quot;project-setup&quot;&gt;Project Setup&lt;/h2&gt;

&lt;p&gt;Add the following dependencies to your Maven POM. Check with the &lt;a href=&quot;http://search.maven.org/&quot;&gt;Central Maven Repository&lt;/a&gt; to determine the current version for Log4j. Check the &lt;a href=&quot;/Write-Forward/download.html&quot;&gt;download page&lt;/a&gt; for the current Write Forward version.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
  &amp;lt;groupId&amp;gt;org.apache.logging.log4j&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;log4j-api&amp;lt;/artifactId&amp;gt;
  &amp;lt;version&amp;gt;2.5&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;

&amp;lt;dependency&amp;gt;
  &amp;lt;groupId&amp;gt;org.apache.logging.log4j&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;log4j-core&amp;lt;/artifactId&amp;gt;
  &amp;lt;version&amp;gt;2.5&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;

&amp;lt;dependency&amp;gt;
   &amp;lt;groupId&amp;gt;org.apache.logging.log4j&amp;lt;/groupId&amp;gt;
   &amp;lt;artifactId&amp;gt;log4j-slf4j-impl&amp;lt;/artifactId&amp;gt;
   &amp;lt;version&amp;gt;2.5&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;

&amp;lt;dependency&amp;gt;
  &amp;lt;groupId&amp;gt;org.writeforward&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;logger&amp;lt;/artifactId&amp;gt;
  &amp;lt;version&amp;gt;${write-forward-version}&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;configuring-write-forward&quot;&gt;Configuring Write Forward&lt;/h2&gt;
&lt;p&gt;Use SLF4J to output to Log4j2. To configure Write Forward the recommended way is to put a configuration file in the  &lt;code class=&quot;highlighter-rouge&quot;&gt;/src/main/resources/&lt;/code&gt; folder in your Java, Scala, or Kotlin project.&lt;/p&gt;

&lt;p&gt;Here is an example &lt;code class=&quot;highlighter-rouge&quot;&gt;/src/main/resources/write-forward-config.yaml&lt;/code&gt; file for Log4j2.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;writeforward:
         isslow: true
         numberofstackframes: 5
         outputs:
              - name: log4j
                format: |-
                    {{ timestamp }} [{{ thread }}] {{ level }}{% if marker is not empty %} {{ marker }}{% endif %}{% if class is not empty %} {{ class }}:{{ line }}{% endif %} - {{ message }}
                    {% if values is not empty %}

                    {% for value in values %}
                    {{ value.key }} = {{ value.value }}

                    {% endfor %}
                    {% endif %}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;configuring-log4j&quot;&gt;Configuring Log4j&lt;/h2&gt;
&lt;p&gt;To configure Log4j, consult the &lt;a href=&quot;https://logging.apache.org/log4j/2.0/manual/index.html&quot;&gt;Log4j documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Log4j configuration file needs to be in the classpath somewhere. To use the following sample configuration create a new file with the name and location &lt;code class=&quot;highlighter-rouge&quot;&gt;/src/main/resources/log4j2.xml&lt;/code&gt; and copy the below XML content into it. Log4j should automatically pick up the file.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;Configuration&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;status=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;WARN&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;Appenders&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;Console&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Console&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;target=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SYSTEM_OUT&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;PatternLayout&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;pattern=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Console&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;Console&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;WriteForward&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;target=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SYSTEM_OUT&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;PatternLayout&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;pattern=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%msg%n&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Console&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Appenders&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;Loggers&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;Logger&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.writeforward.logger.writers.Slf4jOutput&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;level=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;trace&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;additivity=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;false&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;AppenderRef&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ref=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;WriteForward&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;level=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;trace&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Logger&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;Root&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;level=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;warn&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;AppenderRef&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ref=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Console&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;level=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;warn&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Root&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Loggers&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Configuration&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The logger with the name org.writeforward.logger.writers.Slf4jOutput represents the output from WriteForward, and its’  is written plainly out with the &lt;code class=&quot;highlighter-rouge&quot;&gt;%msg%n&lt;/code&gt; format. Everything else is written out with the full pattern.&lt;/p&gt;
</description>
        <pubDate>Mon, 02 May 2016 00:00:00 -0600</pubDate>
        <link>http://prichmp.github.io/Write-Forward/documentation/2016/05/02/log4j.html</link>
        <guid isPermaLink="true">http://prichmp.github.io/Write-Forward/documentation/2016/05/02/log4j.html</guid>
        
        
        <category>documentation</category>
        
      </item>
    
      <item>
        <title>Using java.util.logging</title>
        <description>&lt;h1 id=&quot;using-javautillogging&quot;&gt;Using java.util.logging&lt;/h1&gt;

&lt;p&gt;Java comes with a built-in logger at java.util.logging.&lt;/p&gt;

&lt;h2 id=&quot;project-setup&quot;&gt;Project Setup&lt;/h2&gt;

&lt;p&gt;Add Write Forward to your project. Check the &lt;a href=&quot;/Write-Forward/download.html&quot;&gt;download page&lt;/a&gt; for the current Write Forward version.&lt;/p&gt;

&lt;h2 id=&quot;configuring-write-forward&quot;&gt;Configuring Write Forward&lt;/h2&gt;
&lt;p&gt;To configure Write Forward the recommended way is to put a configuration file in the  &lt;code class=&quot;highlighter-rouge&quot;&gt;/src/main/resources/&lt;/code&gt; folder in your Java, Scala, or Kotlin project.&lt;/p&gt;

&lt;p&gt;Here is an example &lt;code class=&quot;highlighter-rouge&quot;&gt;/src/main/resources/write-forward-config.yaml&lt;/code&gt; file for Java Logging.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  writeforward:
           isslow: true
           numberofstackframes: 2
           outputs:
                - name: javalogging
                  format: |+

                      [{{ level }}] {{ marker }} {{ timestamp }} {% if class is not empty %}{{ class }}:{{ line }}{% endif %}

                      {{ message }}

                      {% if exception is not empty %}
                      {{ exception }}

                      {% endif %}
                      {% if values is not empty %}
                      {% for value in values %}
                      {{ value.key }} = {{ value.value }}

                      {% endfor %}
                      {% endif %}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;configuring-java-logging&quot;&gt;Configuring Java Logging&lt;/h2&gt;
&lt;p&gt;You can find java.util.logging configuration instructions by checking the &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/logging/LogManager.html&quot;&gt;javadoc&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Generally, the java.util.logging defaults work great with Write Forward. If you want to set an output file the easiest way of doing that is with the command line argument/system property &lt;code class=&quot;highlighter-rouge&quot;&gt;java -Djava.util.logging.config.file=myLoggingConfigFilePath&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;levels&quot;&gt;Levels&lt;/h2&gt;

&lt;p&gt;Java.util.logging and Write Forward use different logging levels. The following table shows the mapping between Write Forward levels and java.util.logging levels.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Write Forward Level&lt;/th&gt;&lt;th&gt;java.util.logging level&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;FATAL&lt;/td&gt;&lt;td&gt;SEVERE&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;ERROR&lt;/td&gt;&lt;td&gt;WARNING&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;WARN&lt;/td&gt;&lt;td&gt;WARNING&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;INFO&lt;/td&gt;&lt;td&gt;INFO&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;DEBUG&lt;/td&gt;&lt;td&gt;FINE&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;TRACE&lt;/td&gt;&lt;td&gt;FINER&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
        <pubDate>Mon, 02 May 2016 00:00:00 -0600</pubDate>
        <link>http://prichmp.github.io/Write-Forward/documentation/2016/05/02/javautillogging.html</link>
        <guid isPermaLink="true">http://prichmp.github.io/Write-Forward/documentation/2016/05/02/javautillogging.html</guid>
        
        
        <category>documentation</category>
        
      </item>
    
      <item>
        <title>Composing messages</title>
        <description>&lt;h1 id=&quot;composing-messages&quot;&gt;Composing messages&lt;/h1&gt;

&lt;p&gt;To compose a new message call &lt;code class=&quot;highlighter-rouge&quot;&gt;org.writeforward.logger.Log.message(String mesage)&lt;/code&gt; add to the message using the &lt;code class=&quot;highlighter-rouge&quot;&gt;MessageBuilder&lt;/code&gt; class, and then call a &lt;code class=&quot;highlighter-rouge&quot;&gt;.level()&lt;/code&gt; to commit the message to be written.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;.trace(), .debug(), .info(), .warn(), .error(), .fatal() or .withLevel(Level l) must be the last method called on the message chain or else the message will not be written to the log&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here is an example log:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Log.message(&quot;This is a test&quot;)
.withException(new IOException(&quot;of the emergency&quot;))
.withValue(&quot;Broadcasting&quot;, &quot;System&quot;)
.withValue(&quot;Had this been&quot;, aRealEmergency)
.withMarker(&quot;INSTRUCTIONS&quot;)
.withMarker(&quot;WOULDFOLLOW&quot;)
.debug();
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;See the Javadoc for &lt;code class=&quot;highlighter-rouge&quot;&gt;org.writeforward.loggger.MessageBuilder&lt;/code&gt; to see all message methods.&lt;/p&gt;

&lt;h2 id=&quot;levels&quot;&gt;Levels&lt;/h2&gt;

&lt;p&gt;Write Forward levels are essentially the same as Log4j levels, but different from SLF4J or java.util.logging levels. The following table shows the conversion between different levels.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th&gt;Write Forward Level&lt;/th&gt;&lt;th&gt;SLF4J Level&lt;/th&gt;&lt;th&gt;Log4J Level&lt;/th&gt;&lt;th&gt;java.util.logging level&lt;/th&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;FATAL&lt;/td&gt;&lt;td&gt;ERROR&lt;/td&gt; &lt;td&gt;FATAL&lt;/td&gt; &lt;td&gt;SEVERE&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;ERROR&lt;/td&gt;&lt;td&gt;ERROR&lt;/td&gt; &lt;td&gt;ERROR&lt;/td&gt; &lt;td&gt;WARNING&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;WARN&lt;/td&gt;&lt;td&gt;WARN&lt;/td&gt; &lt;td&gt;WARN&lt;/td&gt; &lt;td&gt;WARNING&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;INFO&lt;/td&gt;&lt;td&gt;INFO&lt;/td&gt; &lt;td&gt;INFO&lt;/td&gt; &lt;td&gt;INFO&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;DEBUG&lt;/td&gt;&lt;td&gt;DEBUG&lt;/td&gt; &lt;td&gt;DEBUG&lt;/td&gt; &lt;td&gt;FINE&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;TRACE&lt;/td&gt;&lt;td&gt;TRACE&lt;/td&gt; &lt;td&gt;TRACE&lt;/td&gt; &lt;td&gt;FINER&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
        <pubDate>Mon, 02 May 2016 00:00:00 -0600</pubDate>
        <link>http://prichmp.github.io/Write-Forward/documentation/2016/05/02/composing-messages.html</link>
        <guid isPermaLink="true">http://prichmp.github.io/Write-Forward/documentation/2016/05/02/composing-messages.html</guid>
        
        
        <category>documentation</category>
        
      </item>
    
  </channel>
</rss>
